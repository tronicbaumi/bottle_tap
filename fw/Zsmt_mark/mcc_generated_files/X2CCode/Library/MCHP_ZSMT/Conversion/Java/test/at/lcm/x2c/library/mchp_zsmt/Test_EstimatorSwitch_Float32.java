/*
 * Copyright (c) {YEAR}, {ORGANIZATION_NAME}, {ORGANIZATION_WEB}
 * All rights reserved.
 */
/*
 * This file is licensed according to the BSD 3-clause license as follows:
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of the "{ORGANIZATION_NAME}" nor
 *     the names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL "{ORGANIZATION_NAME}" BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * This file is part of X2C. http://x2c.lcm.at/
 * $LastChangedRevision: 2108 $
 * $LastChangedDate:: 2020-12-07 19:09:57 +0100#$
 */
/* USERCODE-BEGIN:Description                                                                                                                       */
/* Description: */
/* USERCODE-END:Description                                                                                                                         */

package at.lcm.x2c.library.mchp_zsmt;

import java.util.HashMap;
import java.util.Map;

import at.lcm.bu21.general.dtypes.TData;
import at.lcm.bu21.general.dtypes.TNumeric;
import at.lcm.communication.hardware.Serial;
import at.lcm.x2c.blocktest.ConversionOnTargetTest;
import at.lcm.x2c.blocktest.ConversionTest;
import at.lcm.x2c.blocktest.InportTest;
import at.lcm.x2c.blocktest.TestSuite;
import at.lcm.x2c.communication.protocol.Protocol;
import at.lcm.x2c.communication.protocol.ProtocolFactory;

public class Test_EstimatorSwitch_Float32 {

    public Test_EstimatorSwitch_Float32(Protocol protocol) throws Exception {
        /* Inport test variables start here */
        final int IT_LENGTH = 131;
        final boolean IT_DOINIT = false;
        final double IT_SAMPLETIME = 1.000000e-02;
        /* Inports: */
        final double[] it_in_phi_H = { 3.1101767270538953625, 3.1101767270538953625, 3.0601700891775434066,
                2.9503900422063891185, 2.8852633098221835972, 2.7833001997556268137, 2.5446094493732207553,
                2.3498031542088124723, 2.1723385156706380705, 1.8942393232665246661, 1.6587242300745441703,
                1.4214152148046943491, 1.0937601450278082726, 0.86774637459308079368, 0.55428914299736065097,
                0.21366605672118291204, -0.098514460958831956416, -0.40372994532440587001, -0.71024680537527240531,
                -1.00648600660016041, -1.3248534594063401393, -1.6065696872696666464, -1.8898893586413698653,
                -2.1451777391016948471, -2.3299944266243928226, -2.478618900332097752, -2.7534348253534486339,
                -2.8737643818552909281, -2.9055595109538234766, -3.084686674529573569, -3.0742199983880591496,
                -3.1101767270538953625, -3.1101767270538953625, -3.0853737151674422989, -2.9917470567844612894,
                -2.9849118175441309297, -2.8045343608820436643, -2.7124377114652875598, -2.4690523658093916914,
                -2.2384705852429807038, -1.9981388581137449201, -1.8164740665554179877, -1.568847949464642122,
                -1.2053634790646039487, -0.91257067604652208903, -0.65695352729015576987, -0.3130192048183808029,
                -0.080844271198350831087, 0.25231468210582874701, 0.60578576973769993064, 0.82854071661363315471,
                1.2036566038779674681, 1.5077385755080270346, 1.7158178392814604774, 2.0303492182076219308,
                2.190648992443633869, 2.4243494644255747517, 2.6603276992928495126, 2.8274506358752531376,
                2.8689942623072606231, 2.9969935019349391858, 3.0780245253859130905, 3.1101767270538953625,
                3.0962654923129089291, 3.1101767270538953625, 3.0373819639528454317, 2.9282458596240363846,
                2.8438422494379365091, 2.7536465034422747955, 2.5274138813652506919, 2.3483682255399966898,
                2.1053043134042450646, 1.9530209042652832974, 1.7079979310087172184, 1.3809029294899597406,
                1.1419647756223352264, 0.73434729820591415628, 0.45720265884707328441, 0.18190727294966918537,
                -0.19162170130524017186, -0.41505608422664630464, -0.70916409419278303439, -1.0145083423108014475,
                -1.3418121996652161432, -1.638427228043882744, -1.8589259367149408853, -2.1687333193029618705,
                -2.3392846785231937723, -2.5516980316688728792, -2.7227914884068580292, -2.8423501140114106889,
                -3.0266753654564220177, -3.1083917242656138313, -3.0662299927058889182, -3.1101767270538953625,
                -3.1101767270538953625, -3.1101767270538953625, -3.0558717671491746337, -2.8631096886615390318,
                -2.8184173273174808472, -2.6041849547473865378, -2.4606892050019717466, -2.2125185320905829123,
                -1.9649098268539864076, -1.8010359133069160364, -1.4349212164202151953, -1.2153854168109197165,
                -0.95144831067869706231, -0.58477082918661449362, -0.31323433729966138062, 0.016764443266336120225,
                0.27810266920091036846, 0.60094901166112035806, 0.92553987148174876598, 1.1888325893662339272,
                1.5696232165599734998, 1.7883954303629299165, 2.0826478776861372388, 2.229683265413035187,
                2.4922621028284579481, 2.6061461287388061336, 2.7946358095580006164, 2.9433819500552313997,
                2.9834598467116197895, 3.0811989130457266839, 3.1101767270538953625, 3.0816859114356964788,
                3.1101767270538953625, 3.0178257864624788986, 2.9395967626256465088, 2.6819410792823599188 };
        final double[] it_in_phi_L = { 1.8661060362323371731, 1.8661060362323371731, 1.8361020535065259995,
                1.7702340253238333379, 1.7311579858933101583, 1.6699801198533761326, 1.5267656696239324532,
                1.4098818925252873946, 1.3034031094023827979, 1.1365435939599146664, 0.99523453804472650219,
                0.85284912888281660948, 0.65625608701668491918, 0.52064782475584847621, 0.33257348579841639058,
                0.12819963403270973057, -0.059108676575299168299, -0.24223796719464352201, -0.42614808322516345429,
                -0.60389160396009622378, -0.79491207564380406136, -0.96394181236179998784, -1.1339336151848218304,
                -1.287106643461016775, -1.397996655974635738, -1.4871713401992585624, -1.6520608952120692248,
                -1.7242586291131745124, -1.743335706572294086, -1.850812004717744097, -1.8445319990328354898,
                -1.8661060362323371731, -1.8661060362323371731, -1.8512242291004652461, -1.7950482340706768181,
                -1.7909470905264786023, -1.6827206165292261097, -1.6274626268791725359, -1.4814314194856350593,
                -1.3430823511457883335, -1.198883314868246952, -1.0898844399332507926, -0.94130876967878518435,
                -0.72321808743876236925, -0.54754240562791323121, -0.39417211637409343972, -0.18781152289102848174,
                -0.04850656271901050004, 0.1513888092634972371, 0.36347146184261996948, 0.49712442996817984842,
                0.72219396232678045866, 0.90464314530481615417, 1.0294907035688762864, 1.2182095309245730697,
                1.314389395466180277, 1.454609678655344851, 1.5961966195757095743, 1.6964703815251518382,
                1.7213965573843563739, 1.7981961011609635115, 1.8468147152315477211, 1.8661060362323371731,
                1.857759295387745313, 1.8661060362323371731, 1.822429178371707259, 1.7569475157744218752,
                1.7063053496627618166, 1.6521879020653649217, 1.5164483288191503707, 1.4090209353239979695,
                1.2631825880425469055, 1.1718125425591698896, 1.0247987586052302866, 0.82854175769397586659,
                0.68517886537340111364, 0.44060837892354848266, 0.27432159530824395954, 0.10914436376980150845,
                -0.11497302078314410034, -0.24903365053598777723, -0.42549845651566980953, -0.60870500538648086852,
                -0.80508731979912961929, -0.98305633682632964643, -1.1153555620289645756, -1.3012399915817771667,
                -1.4035708071139161301, -1.5310188190013236387, -1.6336748930441147287, -1.7054100684068462801,
                -1.8160052192738531662, -1.8650350345593682544, -1.8397379956235333509, -1.8661060362323371731,
                -1.8661060362323371731, -1.8661060362323371731, -1.8335230602895047358, -1.7178658131969233303,
                -1.6910503963904883751, -1.5625109728484318783, -1.4764135230011830036, -1.3275111192543496141,
                -1.1789458961123917558, -1.0806215479841496663, -0.86095272985212911721, -0.72923125008655176327,
                -0.57086898640721817078, -0.35086249751196868507, -0.18794060237979681727, 0.010058665959801671788,
                0.16686160152054621553, 0.36056940699667222594, 0.55532392288904919297, 0.71329955361974028971,
                0.94177392993598407767, 1.0730372582177578611, 1.2495887266116822989, 1.3378099592478209789,
                1.4953572616970747244, 1.5636876772432837246, 1.6767814857348002366, 1.766029170033138751,
                1.7900759080269719181, 1.8487193478274359659, 1.8661060362323371731, 1.8490115468614178873,
                1.8661060362323371731, 1.8106954718774872504, 1.7637580575753879497, 1.6091646475694159069 };
        final double[] it_in_n_H = { 0.51635743142867251976, 13.686525594233128089, 24.550166092941235974,
                29.603356124456563947, 58.415544046957940338, 84.705285771758425994, 76.241782737624518518,
                89.993616293664928207, 116.90752090877306557, 118.74971527583572595, 140.35777074237526563,
                166.79332511652347648, 169.00301966972375567, 207.18670355128142546, 220.20902913542715851,
                226.28245011634257366, 242.1162046063308253, 259.87524608314936359, 275.93267521702654221,
                292.99145653489080132, 299.77639412369035199, 314.06977732162187067, 322.80851320167334961,
                334.58977747030058936, 362.14566853402544666, 393.85410480220753016, 377.3897923817007154,
                401.53826916768610999, 444.83493946724928492, 431.81999247047826884, 469.45314598518007188,
                469.71159582187050319, 473.32532932280020077, 509.19160769258496657, 533.57949690935561193,
                520.68089141783843843, 553.66572373393876205, 549.58978867647499555, 585.19660612753364148,
                608.82483431392631701, 628.30329125877801744, 622.57649162548739241, 632.10238315273602439,
                673.60860986714260434, 688.60832714222487994, 688.70389769436826555, 714.80549581185209718,
                704.21238460752840638, 725.63970178507452147, 754.40683304782669438, 743.42929436664985587,
                783.78400807025673203, 805.30455283548667467, 800.94775029815048129, 836.01483353441358304,
                828.33011365065954124, 851.09035564185865042, 882.32482996792191443, 899.9821563605277106,
                886.51416513156482324, 909.83290819525188908, 927.79490782758830392, 954.97005675102150235,
                947.54534113821046049, 980.19736486645570039, 982.60749372824852799, 966.81942035159431725,
                945.7271725530411004, 931.92744482646946835, 883.51256689661465771, 858.26822238130353071,
                820.1789761045592968, 817.82582541448334723, 792.03119986599608637, 745.36862899806317273,
                731.14907420493432255, 666.70068864483482685, 646.29360260854002718, 628.00761316190448724,
                578.99200611273715822, 577.29335331463050807, 551.64479809382100939, 519.98622450661798666,
                477.94896694147831795, 441.37009219400323445, 423.83123393145882574, 371.84943790623179893,
                357.41266447181010335, 322.17057470242303907, 291.97684317089493788, 269.54001533605895702,
                217.38361780430881254, 188.41932423552773912, 189.14633628812990196, 131.64692693134023216,
                102.68288992330209908, 67.721918383077863268, 42.282264385160878817, 41.626543952629617706,
                -15.457743043975696651, -27.460272433138793957, -70.362693541011680054, -87.745231004341050607,
                -112.44335462449502927, -170.19801599252389224, -169.18260589746611799, -219.57611570465147111,
                -259.68642251243346664, -270.00391834846334405, -312.54741194549029615, -337.4352746216640071,
                -384.13425051652660613, -410.21309291614238646, -433.708280698526778, -473.72031667649605424,
                -472.3999758496420327, -517.82267635873859035, -533.54111019781339564, -589.64962097236116279,
                -601.78118624051091956, -653.38962547621372323, -672.81883737459179429, -695.97419085787942095,
                -744.39116191659525157, -764.81472319825411432, -780.00016148153099493, -838.05236595816154477,
                -837.84398213425663471, -891.92803120634960123, -918.93176331247093458, -977.20306879437453063 };
        final double[] it_in_n_L = { 0.41308594514293806021, 10.949220475386503892, 19.640132874352989489,
                23.682684899565252579, 46.732435237566356534, 67.764228617406743638, 60.993426190099619078,
                71.99489303493194825, 93.526016727018458141, 94.999772220668589284, 112.28621659390022103,
                133.43466009321878118, 135.20241573577899885, 165.74936284102514605, 176.16722330834173249,
                181.02596009307407598, 193.69296368506468298, 207.90019686651950792, 220.74614017362125651,
                234.39316522791264674, 239.82111529895229296, 251.25582185729751927, 258.24681056133869106,
                267.67182197624049422, 289.71653482722035733, 315.08328384176604686, 301.91183390536059505,
                321.2306153341489221, 355.86795157379947341, 345.45599397638261507, 375.56251678814408024,
                375.76927665749644802, 378.66026345824019472, 407.35328615406797326, 426.86359752748450092,
                416.54471313427075074, 442.93257898715103238, 439.67183094118001918, 468.15728490202695866,
                487.05986745114108771, 502.64263300702242532, 498.0611933003899594, 505.68190652218885361,
                538.88688789371406074, 550.88666171377997216, 550.96311815549461244, 571.84439664948172322,
                563.36990768602277058, 580.51176142805968539, 603.52546643826133277, 594.74343549331990744,
                627.02720645620547657, 644.24364226838940795, 640.7582002385204305, 668.81186682753093464,
                662.66409092052765573, 680.87228451348698854, 705.85986397433759976, 719.98572508842221396,
                709.21133210525192681, 727.86632655620155674, 742.23592626207073408, 763.97604540081727009,
                758.03627291056841386, 784.15789189316456032, 786.0859949825988906, 773.45553628127549928,
                756.58173804243290306, 745.54195586117566563, 706.8100535172917489, 686.61457790504289278,
                656.14318088364746018, 654.26066033158667778, 633.62495989279693731, 596.29490319845058366,
                584.91925936394750352, 533.36055091586786148, 517.034882086831999, 502.4060905295236239,
                463.19360489018976068, 461.83468265170444056, 441.31583847505680751, 415.98897960529438933,
                382.35917355318269983, 353.0960737552026103, 339.0649871451670947, 297.47955032498543915,
                285.93013157744809405, 257.73645976193841989, 233.58147453671597304, 215.63201226884717698,
                173.90689424344705571, 150.73545938842218561, 151.31706903050391588, 105.31754154507218857,
                82.146311938641687789, 54.177534706462296299, 33.825811508128701632, 33.301235162103694165,
                -12.366194435180558386, -21.968217946511035876, -56.290154832809349728, -70.19618480347284617,
                -89.954683699596031943, -136.15841279401911379, -135.34608471797290008, -175.66089256372117688,
                -207.74913800994679036, -216.00313467877069229, -250.0379295563922426, -269.94821969733123979,
                -307.30740041322133038, -328.17047433291395464, -346.9666245588214224, -378.97625334119686613,
                -377.91998067971366027, -414.25814108699091776, -426.83288815825073925, -471.7196967778889416,
                -481.42494899240875839, -522.71170038097102406, -538.25506989967345817, -556.77935268630358223,
                -595.51292953327617852, -611.8517785586033142, -624.00012918522486416, -670.44189276652923581,
                -670.27518570740539872, -713.54242496507970372, -735.14541064997683861, -781.76245503549966998 };
        /* Mask parameters: */
        final double[] it_mp_thresh_up = { 600 };
        final double[] it_mp_thresh_down = { 100 };
        final double[] it_mp_n_max = { 1 };
        final double[] it_mp_ts_fact = { 1 };
        /* Outports: */
        final double[] it_out_phi = { 1.8661060362323371731, 1.8661060362323371731, 1.8361020535065259995,
                1.7702340253238333379, 1.7311579858933101583, 1.6699801198533761326, 1.5267656696239324532,
                1.4098818925252873946, 1.3034031094023827979, 1.1365435939599146664, 0.99523453804472650219,
                0.85284912888281660948, 0.65625608701668491918, 0.52064782475584847621, 0.33257348579841639058,
                0.12819963403270973057, -0.059108676575299168299, -0.24223796719464352201, -0.42614808322516345429,
                -0.60389160396009622378, -0.79491207564380406136, -0.96394181236179998784, -1.1339336151848218304,
                -1.287106643461016775, -1.397996655974635738, -1.4871713401992585624, -1.6520608952120692248,
                -1.7242586291131745124, -1.743335706572294086, -1.850812004717744097, -1.8445319990328354898,
                -1.8661060362323371731, -1.8661060362323371731, -1.8512242291004652461, -1.7950482340706768181,
                -1.7909470905264786023, -1.6827206165292261097, -1.6274626268791725359, -1.4814314194856350593,
                -1.3430823511457883335, -1.198883314868246952, -1.0898844399332507926, -0.94130876967878518435,
                -0.72321808743876236925, -0.54754240562791323121, -0.39417211637409343972, -0.18781152289102848174,
                -0.04850656271901050004, 0.1513888092634972371, 0.36347146184261996948, 0.82854071661363315471,
                1.2036566038779674681, 1.5077385755080270346, 1.7158178392814604774, 2.0303492182076219308,
                2.190648992443633869, 2.4243494644255747517, 2.6603276992928495126, 2.8274506358752531376,
                2.8689942623072606231, 2.9969935019349391858, 3.0780245253859130905, 3.1101767270538953625,
                3.0962654923129089291, 3.1101767270538953625, 3.0373819639528454317, 2.9282458596240363846,
                2.8438422494379365091, 2.7536465034422747955, 2.5274138813652506919, 2.3483682255399966898,
                2.1053043134042450646, 1.9530209042652832974, 1.7079979310087172184, 1.3809029294899597406,
                1.1419647756223352264, 0.73434729820591415628, 0.45720265884707328441, 0.18190727294966918537,
                -0.19162170130524017186, -0.41505608422664630464, -0.70916409419278303439, -1.0145083423108014475,
                -1.3418121996652161432, -1.638427228043882744, -1.8589259367149408853, -2.1687333193029618705,
                -2.3392846785231937723, -2.5516980316688728792, -2.7227914884068580292, -2.8423501140114106889,
                -3.0266753654564220177, -3.1083917242656138313, -3.0662299927058889182, -3.1101767270538953625,
                -3.1101767270538953625, -3.1101767270538953625, -1.8335230602895047358, -1.7178658131969233303,
                -1.6910503963904883751, -1.5625109728484318783, -1.4764135230011830036, -1.3275111192543496141,
                -1.1789458961123917558, -1.0806215479841496663, -0.86095272985212911721, -0.72923125008655176327,
                -0.57086898640721817078, -0.35086249751196868507, -0.18794060237979681727, 0.010058665959801671788,
                0.16686160152054621553, 0.36056940699667222594, 0.55532392288904919297, 0.71329955361974028971,
                0.94177392993598407767, 1.0730372582177578611, 1.2495887266116822989, 1.3378099592478209789,
                1.4953572616970747244, 1.5636876772432837246, 1.6767814857348002366, 1.766029170033138751,
                1.7900759080269719181, 1.8487193478274359659, 3.1101767270538953625, 3.0816859114356964788,
                3.1101767270538953625, 3.0178257864624788986, 2.9395967626256465088, 2.6819410792823599188 };
        final double[] it_out_n = { 0.41308594514293806021, 10.949220475386503892, 19.640132874352989489,
                23.682684899565252579, 46.732435237566356534, 67.764228617406743638, 60.993426190099619078,
                71.99489303493194825, 93.526016727018458141, 94.999772220668589284, 112.28621659390022103,
                133.43466009321878118, 135.20241573577899885, 165.74936284102514605, 176.16722330834173249,
                181.02596009307407598, 193.69296368506468298, 207.90019686651950792, 220.74614017362125651,
                234.39316522791264674, 239.82111529895229296, 251.25582185729751927, 258.24681056133869106,
                267.67182197624049422, 289.71653482722035733, 315.08328384176604686, 301.91183390536059505,
                321.2306153341489221, 355.86795157379947341, 345.45599397638261507, 375.56251678814408024,
                375.76927665749644802, 378.66026345824019472, 407.35328615406797326, 426.86359752748450092,
                416.54471313427075074, 442.93257898715103238, 439.67183094118001918, 468.15728490202695866,
                487.05986745114108771, 502.64263300702242532, 498.0611933003899594, 505.68190652218885361,
                538.88688789371406074, 550.88666171377997216, 550.96311815549461244, 571.84439664948172322,
                563.36990768602277058, 580.51176142805968539, 603.52546643826133277, 743.42929436664985587,
                783.78400807025673203, 805.30455283548667467, 800.94775029815048129, 836.01483353441358304,
                828.33011365065954124, 851.09035564185865042, 882.32482996792191443, 899.9821563605277106,
                886.51416513156482324, 909.83290819525188908, 927.79490782758830392, 954.97005675102150235,
                947.54534113821046049, 980.19736486645570039, 982.60749372824852799, 966.81942035159431725,
                945.7271725530411004, 931.92744482646946835, 883.51256689661465771, 858.26822238130353071,
                820.1789761045592968, 817.82582541448334723, 792.03119986599608637, 745.36862899806317273,
                731.14907420493432255, 666.70068864483482685, 646.29360260854002718, 628.00761316190448724,
                578.99200611273715822, 577.29335331463050807, 551.64479809382100939, 519.98622450661798666,
                477.94896694147831795, 441.37009219400323445, 423.83123393145882574, 371.84943790623179893,
                357.41266447181010335, 322.17057470242303907, 291.97684317089493788, 269.54001533605895702,
                217.38361780430881254, 188.41932423552773912, 189.14633628812990196, 131.64692693134023216,
                102.68288992330209908, 67.721918383077863268, 33.825811508128701632, 33.301235162103694165,
                -12.366194435180558386, -21.968217946511035876, -56.290154832809349728, -70.19618480347284617,
                -89.954683699596031943, -136.15841279401911379, -135.34608471797290008, -175.66089256372117688,
                -207.74913800994679036, -216.00313467877069229, -250.0379295563922426, -269.94821969733123979,
                -307.30740041322133038, -328.17047433291395464, -346.9666245588214224, -378.97625334119686613,
                -377.91998067971366027, -414.25814108699091776, -426.83288815825073925, -471.7196967778889416,
                -481.42494899240875839, -522.71170038097102406, -538.25506989967345817, -556.77935268630358223,
                -595.51292953327617852, -611.8517785586033142, -780.00016148153099493, -838.05236595816154477,
                -837.84398213425663471, -891.92803120634960123, -918.93176331247093458, -977.20306879437453063 };
        final double[] it_out_Enable_H = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1 };
        final double[] it_out_Enable_L = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                0, 0, 0, 0 };
        /* Outport Tolerances: */
        final double it_tol_phi = 300 * Math.pow(2, -31);
        final double it_tol_n = 80000 * Math.pow(2, -31);
        final double it_tol_Enable_H = 0 * Math.pow(2, -0);
        final double it_tol_Enable_L = 0 * Math.pow(2, -0);
        /* Inport test variables end here */

        // /* Parameter test variables start here */
        // final int PT_LENGTH = 3;
        // final boolean PT_DOINIT = true;
        // final double PT_SAMPLETIME = 0.0;
        // /* Inport: phi_H */
        // final double pt_in_phi_H = 0;
        // /* Inport: phi_L */
        // final double pt_in_phi_L = 0;
        // /* Inport: n_H */
        // final double pt_in_n_H = 0;
        // /* Inport: n_L */
        // final double pt_in_n_L = 0;
        // /* Mask parameter: thresh_up */
        // final double[][] pt_mp_thresh_up = { { 0 }, { 0 }, { 0 } };
        // /* Mask parameter: thresh_down */
        // final double[][] pt_mp_thresh_down = { { 0 }, { 0 }, { 0 } };
        // /* Mask parameter: n_max */
        // final double[][] pt_mp_n_max = { { 0 }, { 0 }, { 0 } };
        // /* Mask parameter: ts_fact */
        // final double[][] pt_mp_ts_fact = { { 0 }, { 0 }, { 0 } };
        // /* Outport: phi */
        // final double[] pt_out_phi = { 0, 0, 0 };
        // /* Outport: n */
        // final double[] pt_out_n = { 0, 0, 0 };
        // /* Outport: Enable_H */
        // final double[] pt_out_Enable_H = { 0, 0, 0 };
        // /* Outport: Enable_L */
        // final double[] pt_out_Enable_L = { 0, 0, 0 };
        // /* Outport tolerances: phi */
        // final double pt_tol_phi = Math.pow(2, -31);
        // /* Outport tolerances: n */
        // final double pt_tol_n = Math.pow(2, -31);
        // /* Outport tolerances: Enable_H */
        // final double pt_tol_Enable_H = Math.pow(2, -0);
        // /* Outport tolerances: Enable_L */
        // final double pt_tol_Enable_L = Math.pow(2, -0);
        // /* Parameter test variables end here */

        /* Conversion test variables start here */
        final int CT_LENGTH = 8;
        final double CT_SAMPLETIME = 0.0001;
        /* Mask parameter: thresh_up */
        final double[][] ct_mp_thresh_up = { { 0 }, { 1 }, { 999 }, { 1000 }, { 1001 }, { 600 }, { 1024 }, { 33000 } };
        /* Mask parameter: thresh_down */
        final double[][] ct_mp_thresh_down = { { 0 }, { 0 }, { 1 }, { 100 }, { 100 }, { 200 }, { 512 }, { 3000 } };
        /* Mask parameter: n_max */
        final double[][] ct_mp_n_max = { { 1000 }, { 1000 }, { 1000 }, { 1000 }, { 1000 }, { -1000 }, { 32768 },
                { 32768 } };
        /* Mask parameter: ts_fact */
        final double[][] ct_mp_ts_fact = { { 1 }, { 1 }, { 1 }, { 1 }, { 1 }, { 1 }, { 1 }, { 1 } };
        /* Implementation parameter: thresh_up */
        final double[][] ct_cp_thresh_up = { { 0 }, { 1 }, { 999 }, { 1000 }, { 1001 }, { 600 }, { 1024 }, { 33000 } };
        /* Implementation parameter: thresh_down */
        final double[][] ct_cp_thresh_down = { { 0 }, { 0 }, { 1 }, { 100 }, { 100 }, { 200 }, { 512 }, { 3000 } };
        /* Implementation Parameter tolerances: thresh_up */
        final double ct_tol_thresh_up = 0.0;
        /* Implementation Parameter tolerances: thresh_down */
        final double ct_tol_thresh_down = 0.0;
        /* Conversion test variables end here */

        /* Conversion-on-Target test variables start here */
        /* ! Uses test vectors of Conversion test ! */
        /* Implementation Parameter tolerances: thresh_up */
        final double cott_tol_thresh_up = 0;
        /* Implementation Parameter tolerances: thresh_down */
        final double cott_tol_thresh_down = 0;
        /* Conversion-on-Target test variables end here */

        try {
            TestSuite suite = new TestSuite(protocol, "mchp_zsmt", "EstimatorSwitch", "Float32");

            /* INPORT TEST */
            InportTest it = new InportTest("mchp_zsmt", "EstimatorSwitch", "Float32", protocol, IT_DOINIT);
            Map<String, TData> it_mp = new HashMap<String, TData>();
            it_mp.put("thresh_up", new TNumeric(it_mp_thresh_up));
            it_mp.put("thresh_down", new TNumeric(it_mp_thresh_down));
            it_mp.put("n_max", new TNumeric(it_mp_n_max));
            it_mp.put("ts_fact", new TNumeric(it_mp_ts_fact));
            it.setMaskParameters(it_mp);
            Map<String,  Double> it_tol = new HashMap<String, Double>();
            it_tol.put("phi", it_tol_phi);
            it_tol.put("n", it_tol_n);
            it_tol.put("Enable_H", it_tol_Enable_H);
            it_tol.put("Enable_L", it_tol_Enable_L);
            it.setTolerances(it_tol);
            for (int i = 0; i < IT_LENGTH; i++) {
                Map<String,  TNumeric> it_in = new HashMap<String, TNumeric>();
                Map<String,  TNumeric> it_out = new HashMap<String, TNumeric>();
                it_in.put("phi_H", new TNumeric(it_in_phi_H[i]));
                it_in.put("phi_L", new TNumeric(it_in_phi_L[i]));
                it_in.put("n_H", new TNumeric(it_in_n_H[i]));
                it_in.put("n_L", new TNumeric(it_in_n_L[i]));
                it_out.put("phi", new TNumeric(it_out_phi[i]));
                it_out.put("n", new TNumeric(it_out_n[i]));
                it_out.put("Enable_H", new TNumeric(it_out_Enable_H[i]));
                it_out.put("Enable_L", new TNumeric(it_out_Enable_L[i]));
                it.addConfig(it_in, it_out);
            }
            it.setSampleTime(IT_SAMPLETIME);
            suite.add(it);

            // /* PARAMETER TEST */
            // ParameterTest pt = new ParameterTest("mchp_zsmt", "EstimatorSwitch", "Float32", protocol,
            // PT_DOINIT);
            // Map<String, TNumeric> pt_in = new HashMap<String, TNumeric>();
            // pt_in.put("phi_H", new TNumeric(pt_in_phi_H));
            // pt_in.put("phi_L", new TNumeric(pt_in_phi_L));
            // pt_in.put("n_H", new TNumeric(pt_in_n_H));
            // pt_in.put("n_L", new TNumeric(pt_in_n_L));
            // pt.setInports(pt_in);
            // Map<String, Double> pt_tol = new HashMap<String, Double>();
            // pt_tol.put("phi", pt_tol_phi);
            // pt_tol.put("n", pt_tol_n);
            // pt_tol.put("Enable_H", pt_tol_Enable_H);
            // pt_tol.put("Enable_L", pt_tol_Enable_L);
            // pt.setTolerances(pt_tol);
            // for (int i = 0; i < PT_LENGTH; i++) {
            // Map<String, TData> pt_mp = new HashMap<String, TData>();
            // Map<String, TNumeric> pt_out = new HashMap<String, TNumeric>();
            // pt_mp.put("thresh_up", new TNumeric(pt_mp_thresh_up[i]));
            // pt_mp.put("thresh_down", new TNumeric(pt_mp_thresh_down[i]));
            // pt_mp.put("n_max", new TNumeric(pt_mp_n_max[i]));
            // pt_mp.put("ts_fact", new TNumeric(pt_mp_ts_fact[i]));
            // pt_out.put("phi", new TNumeric(pt_out_phi[i]));
            // pt_out.put("n", new TNumeric(pt_out_n[i]));
            // pt_out.put("Enable_H", new TNumeric(pt_out_Enable_H[i]));
            // pt_out.put("Enable_L", new TNumeric(pt_out_Enable_L[i]));
            // pt.addConfig(pt_mp, pt_out);
            // }
            // pt.setSampleTime(PT_SAMPLETIME);
            // suite.add(pt);

            /* CONVERSION TEST */
            ConversionTest ct = new ConversionTest("mchp_zsmt", "EstimatorSwitch", "Float32");
            Map<String,  Double> ct_tol = new HashMap<String, Double>();
            ct_tol.put("thresh_up", ct_tol_thresh_up);
            ct_tol.put("thresh_down", ct_tol_thresh_down);
            ct.setTolerances(ct_tol);
            for (int i = 0; i < CT_LENGTH; i++) {
                Map<String, TData> ct_mp = new HashMap<String, TData>();
                Map<String, TNumeric> ct_cp = new HashMap<String, TNumeric>();
                ct_mp.put("thresh_up", new TNumeric(ct_mp_thresh_up[i]));
                ct_mp.put("thresh_down", new TNumeric(ct_mp_thresh_down[i]));
                ct_mp.put("n_max", new TNumeric(ct_mp_n_max[i]));
                ct_mp.put("ts_fact", new TNumeric(ct_mp_ts_fact[i]));
                ct_cp.put("thresh_up", new TNumeric(ct_cp_thresh_up[i]));
                ct_cp.put("thresh_down", new TNumeric(ct_cp_thresh_down[i]));
                ct.addConfig(ct_mp, ct_cp);
            }
            ct.setSampleTime(CT_SAMPLETIME);
            suite.add(ct);

            /* CONVERSION-ON-TARGET TEST */
            ConversionOnTargetTest cott = new ConversionOnTargetTest("mchp_zsmt", "EstimatorSwitch", "Float32", protocol);
            Map<String,  Double> cott_tol = new HashMap<String, Double>();
            cott_tol.put("thresh_up", cott_tol_thresh_up);
            cott_tol.put("thresh_down", cott_tol_thresh_down);
            cott.setTolerances(cott_tol);
            for (int i = 0; i < CT_LENGTH; i++) {
                Map<String, TData> cott_mp = new HashMap<String, TData>();
                Map<String, TNumeric> cott_cp = new HashMap<String, TNumeric>();
                /* Uses test data of Conversion test */
                cott_mp.put("thresh_up", new TNumeric(ct_mp_thresh_up[i]));
                /* Uses test data of Conversion test */
                cott_mp.put("thresh_down", new TNumeric(ct_mp_thresh_down[i]));
                /* Uses test data of Conversion test */
                cott_mp.put("n_max", new TNumeric(ct_mp_n_max[i]));
                /* Uses test data of Conversion test */
                cott_mp.put("ts_fact", new TNumeric(ct_mp_ts_fact[i]));
                /* Use test data of Conversion test */
                cott_cp.put("thresh_up", new TNumeric(ct_cp_thresh_up[i]));
                /* Use test data of Conversion test */
                cott_cp.put("thresh_down", new TNumeric(ct_cp_thresh_down[i]));
                cott.addConfig(cott_mp, cott_cp);
            }
            /* Use sample time of Conversion test */
            cott.setSampleTime(CT_SAMPLETIME);
            suite.add(cott);

            suite.test();
            suite.report();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws Exception {
        final String port;
        if (args.length == 0) {
            port = "COM17";
        } else {
            port = args[0];
        }
        Protocol protocol = ProtocolFactory.getLNet(new Serial(115200, Serial.Databits.BITS_8, Serial.Parity.NONE, Serial.Stopbits.STOPBITS_1, port), 1);
        new Test_EstimatorSwitch_Float32(protocol);
    }
}
