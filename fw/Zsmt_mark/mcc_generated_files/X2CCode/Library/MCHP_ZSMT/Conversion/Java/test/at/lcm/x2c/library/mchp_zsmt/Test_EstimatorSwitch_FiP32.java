/*
 * Copyright (c) {YEAR}, {ORGANIZATION_NAME}, {ORGANIZATION_WEB}
 * All rights reserved.
 */
/*
 * This file is licensed according to the BSD 3-clause license as follows:
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of the "{ORGANIZATION_NAME}" nor
 *     the names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL "{ORGANIZATION_NAME}" BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * This file is part of X2C. http://x2c.lcm.at/
 * $LastChangedRevision: 2108 $
 * $LastChangedDate:: 2020-12-07 19:09:57 +0100#$
 */
/* USERCODE-BEGIN:Description                                                                                                                       */
/* Description: */
/* USERCODE-END:Description                                                                                                                         */

package at.lcm.x2c.library.mchp_zsmt;

import java.util.HashMap;
import java.util.Map;

import at.lcm.bu21.general.dtypes.TData;
import at.lcm.bu21.general.dtypes.TNumeric;
import at.lcm.communication.hardware.Serial;
import at.lcm.x2c.blocktest.ConversionOnTargetTest;
import at.lcm.x2c.blocktest.ConversionTest;
import at.lcm.x2c.blocktest.InportTest;
import at.lcm.x2c.blocktest.TestSuite;
import at.lcm.x2c.communication.protocol.Protocol;
import at.lcm.x2c.communication.protocol.ProtocolFactory;

public class Test_EstimatorSwitch_FiP32 {

    public Test_EstimatorSwitch_FiP32(Protocol protocol) throws Exception {
        /* Inport test variables start here */
        final int IT_LENGTH = 131;
        final boolean IT_DOINIT = false;
        final double IT_SAMPLETIME = 1.000000e-02;
        /* Inports: */
        final double[] it_in_phi_H = { 0.98999999999999999112, 0.98999999999999999112, 0.9740823927891444356,
                0.93913831853250506754, 0.91840783575976647768, 0.88595196979953549921, 0.80997434421218816869,
                0.74796557457051948692, 0.6914768256757856113, 0.60295510339382818454, 0.52798832088532399176,
                0.45245051524439061641, 0.34815466727616806164, 0.27621224973312052953, 0.17643571402040073015,
                0.068012018196259099723, -0.0313581268552632908, -0.12851123294519967155, -0.22607857978140388777,
                -0.32037444620647509419, -0.4217139538738334803, -0.51138701430113575608, -0.60157046664909163969,
                -0.68283128197746190136, -0.74166026074767710252, -0.78896890005770248244, -0.87644552587274182631,
                -0.91474761330738929566, -0.924868317231942072, -0.98188626428216430053, -0.97855461779083630081,
                -0.98999999999999999112, -0.98999999999999999112, -0.98210495610940795608, -0.95230266513575256848,
                -0.95012694091112404049, -0.89271101321089341152, -0.86339573921713741456, -0.78592377754260656086,
                -0.71252731721445650148, -0.6360273525055956112, -0.57820165338106255248, -0.49937981223376365358,
                -0.3836791118311520532, -0.29048026802703336147, -0.20911480249976929779, -0.099637107459079457539,
                -0.025733530763758560855, 0.080314257743605677042, 0.19282759941696731021, 0.26373270120392194871,
                0.38313579658476382139, 0.47992809436487077202, 0.5461617811337993178, 0.64628022856101652316,
                0.69730523145336886781, 0.77169440209103856709, 0.84680860717349260014, 0.90000549009573838077,
                0.91322923709697267913, 0.95397266049447071445, 0.97976563634650637447, 0.98999999999999999112,
                0.98557191645292063775, 0.98999999999999999112, 0.96682870724252878425, 0.93208960629508330609,
                0.90522310274324480073, 0.87651290510110368981, 0.80450082491670560358, 0.74750882258926687474,
                0.6701391763819488645, 0.62166586175124627367, 0.54367262702153473786, 0.43955505431681224371,
                0.36349867775424360428, 0.23375000491129874214, 0.14553212630053838361, 0.057902883348612946279,
                -0.060995081932815331527, -0.13211645493007362351, -0.2257339421081357711, -0.3229280349734573452,
                -0.42711208855545673702, -0.5215275844790719928, -0.59171450333982933412, -0.69032925603032035955,
                -0.74461743977220318236, -0.81223071003592162143, -0.86669144877698101048, -0.90474814128545666403,
                -0.96342069109371675228, -0.98943181596562446156, -0.97601131999153689645, -0.98999999999999999112,
                -0.98999999999999999112, -0.98999999999999999112, -0.97271419439351303193, -0.91135611912956282499,
                -0.8971300986768508956, -0.82893781654718068364, -0.7832617007778600593, -0.70426652212928109176,
                -0.62545022334730426827, -0.57328753657764397467, -0.45674960908142514526, -0.38686919369452288375,
                -0.30285540348189599058, -0.18613833608199217839, -0.099705586254710321104, 0.0053362880280420667278,
                0.088522828980750173367, 0.19128801150411273158, 0.29460849114991571884, 0.37841716621274706922,
                0.49962658741464061052, 0.56926394589043560757, 0.66292740890718759861, 0.70973022643952599076,
                0.79331166629150129399, 0.82956207761717615234, 0.889560206465552894, 0.93690757351750453275,
                0.94966476424068524409, 0.98077607532120480993, 0.98999999999999999112, 0.98093109172328774026,
                0.98999999999999999112, 0.96060378261138024136, 0.93570271093760903902, 0.8536883596980007205 };
        final double[] it_in_phi_L = { 0.59399999999999997247, 0.59399999999999997247, 0.58444943567348661695,
                0.56348299111950306273, 0.55104470145585981999, 0.53157118187972129952, 0.48598460652731290121,
                0.44877934474231168105, 0.41488609540547133347, 0.36177306203629688852, 0.31679299253119436175,
                0.27147030914663433654, 0.20889280036570082033, 0.16572734983987230661, 0.10586142841224042976,
                0.040807210917755458446, -0.018814876113157973786, -0.077106739767119805706, -0.13564714786884232711,
                -0.19222466772388505096, -0.25302837232430008818, -0.30683220858068144254, -0.36094227998945499492,
                -0.40969876918647712971, -0.44499615644860623931, -0.47338134003462145616, -0.52586731552364507358,
                -0.5488485679844335996, -0.55492099033916519879, -0.58913175856929855811, -0.58713277067450175828,
                -0.59399999999999997247, -0.59399999999999997247, -0.58926297366564472924, -0.57138159908145147448,
                -0.57007616454667442429, -0.53562660792653604691, -0.51803744353028247094, -0.47155426652556392542,
                -0.42751639032867388979, -0.38161641150335734451, -0.34692099202863752039, -0.29962788734025819215,
                -0.23020746709869122082, -0.17428816081622000578, -0.12546888149986157313, -0.059782264475447668972,
                -0.015440118458255136166, 0.048188554646163402062, 0.11569655965018038613, 0.15823962072235317478,
                0.22988147795085828173, 0.28795685661892245211, 0.32769706868027959068, 0.38776813713660990279,
                0.41838313887202133179, 0.46301664125462310695, 0.50808516430409556008, 0.54000329405744296185,
                0.54793754225818358528, 0.57238359629668245088, 0.58785938180790375807, 0.59399999999999997247,
                0.59134314987175240486, 0.59399999999999997247, 0.58009722434551724835, 0.55925376377704993924,
                0.54313386164594690264, 0.52590774306066223609, 0.48270049495002331774, 0.44850529355356011374,
                0.4020835058291692965, 0.372999517050747742, 0.32620357621292084271, 0.26373303259008734623,
                0.21809920665254614591, 0.14025000294677925083, 0.087319275780323030167, 0.034741730009167769155,
                -0.036597049159689198916, -0.07926987295804417688, -0.13544036526488145711, -0.19375682098407440157,
                -0.25626725313327403111, -0.31291655068744317347, -0.35502870200389757827, -0.41419755361819221573,
                -0.44677046386332192052, -0.48733842602155297286, -0.52001486926618856188, -0.54284888477127402062,
                -0.57805241465623002917, -0.59365908957937463253, -0.58560679199492216007, -0.59399999999999997247,
                -0.59399999999999997247, -0.59399999999999997247, -0.58362851663610781916, -0.54681367147773762838,
                -0.53827805920611049295, -0.49736268992830839908, -0.46995702046671600227, -0.42255991327756864395,
                -0.37527013400838254986, -0.3439725219465863959, -0.27404976544885506495, -0.23212151621671373025,
                -0.18171324208913758325, -0.11168300164919529871, -0.059823351752826187111, 0.0032017728168252401234,
                0.053113697388450099857, 0.11477280690246763339, 0.17676509468994941465, 0.22705029972764823043,
                0.29977595244878435521, 0.34155836753426133123, 0.39775644534431253696, 0.42583813586371560556,
                0.47598699977490077639, 0.4977372465703056581, 0.53373612387933166978, 0.56214454411050274185,
                0.56979885854441114645, 0.58846564519272281935, 0.59399999999999997247, 0.58855865503397264415,
                0.59399999999999997247, 0.57636226956682812261, 0.56142162656256544562, 0.51221301581880041009 };
        final double[] it_in_n_H = { 0.00051635743142867257527, 0.013686525594233127714, 0.024550166092941236307,
                0.029603356124456563919, 0.058415544046957937341, 0.084705285771758426216, 0.076241782737624524957,
                0.089993616293664924211, 0.11690752090877307157, 0.11874971527583572106, 0.14035777074237526518,
                0.16679332511652347759, 0.169003019669723753, 0.20718670355128143701, 0.22020902913542717005,
                0.22628245011634257056, 0.24211620460633082041, 0.25987524608314938046, 0.27593267521702652401,
                0.29299145653489078178, 0.29977639412369033733, 0.31406977732162189021, 0.32280851320167336382,
                0.3345897774703006089, 0.36214566853402546664, 0.39385410480220750529, 0.37738979238170072827,
                0.40153826916768609046, 0.44483493946724927959, 0.4318199924704782533, 0.46945314598518006477,
                0.46971159582187049786, 0.47332532932280019233, 0.50919160769258497989, 0.53357949690935557729,
                0.52068089141783846507, 0.55366572373393874162, 0.54958978867647501065, 0.58519660612753365836,
                0.60882483431392631079, 0.62830329125877804053, 0.62257649162548733823, 0.63210238315273603593,
                0.67360860986714254928, 0.68860832714222486306, 0.6887038976943682389, 0.714805495811852043,
                0.70421238460752844102, 0.72563970178507453124, 0.75440683304782674146, 0.74342929436664983989,
                0.78378400807025672137, 0.80530455283548663115, 0.80094775029815046263, 0.83601483353441352619,
                0.82833011365065956078, 0.85109035564185864242, 0.88232482996792194196, 0.89998215636052769639,
                0.88651416513156477972, 0.90983290819525186599, 0.92779490782758833323, 0.95497005675102153432,
                0.94754534113821042851, 0.98019736486645570039, 0.98260749372824851555, 0.96681942035159429416,
                0.94572717255304106221, 0.93192744482646949766, 0.88351256689661461508, 0.85826822238130351383,
                0.82017897610455925417, 0.81782582541448334279, 0.79203119986599612723, 0.74536862899806322069,
                0.73114907420493435719, 0.66670068864483478244, 0.64629360260854007425, 0.62800761316190445438,
                0.57899200611273715644, 0.57729335331463049741, 0.5516447980938210538, 0.51998622450661802219,
                0.47794896694147831484, 0.44137009219400324955, 0.4238312339314588284, 0.3718494379062318167,
                0.35741266447181008203, 0.32217057470242305151, 0.29197684317089495076, 0.26954001533605898011,
                0.2173836178043088152, 0.18841932423552773535, 0.18914633628812990707, 0.13164692693134022461,
                0.10268288992330210085, 0.067721918383077867043, 0.042282264385160882314, 0.041626543952629616041,
                -0.015457743043975695832, -0.027460272433138793041, -0.070362693541011683829, -0.087745231004341048275,
                -0.11244335462449503438, -0.17019801599252390445, -0.16918260589746611511, -0.21957611570465146444,
                -0.25968642251243345687, -0.27000391834846332317, -0.31254741194549029437, -0.33743527462166400532,
                -0.38413425051652660969, -0.41021309291614238557, -0.43370828069852679354, -0.47372031667649605602,
                -0.47239997584964205091, -0.51782267635873857614, -0.53354111019781336189, -0.589649620972361177,
                -0.60178118624051091246, -0.65338962547621370902, -0.67281883737459180495, -0.69597419085787937121,
                -0.74439116191659526756, -0.76481472319825416495, -0.78000016148153095141, -0.83805236595816157141,
                -0.83784398213425659296, -0.8919280312063495586, -0.91893176331247095057, -0.97720306879437457415 };
        final double[] it_in_n_L = { 0.0004130859451429380819, 0.010949220475386503559, 0.019640132874352990433,
                0.023682684899565251135, 0.04673243523756635126, 0.067764228617406746524, 0.060993426190099619966,
                0.071994893034931936593, 0.093526016727018462804, 0.09499977222066857685, 0.11228621659390021492,
                0.13343466009321877652, 0.13520241573577901351, 0.16574936284102514961, 0.1761672233083417527,
                0.181025960093074062, 0.19369296368506466743, 0.20790019686651950437, 0.22074614017362123586,
                0.23439316522791264763, 0.23982111529895228097, 0.25125582185729750107, 0.25824681056133869106,
                0.26767182197624050932, 0.28971653482722037332, 0.31508328384176603754, 0.30191183390536058262,
                0.32123061533414887236, 0.35586795157379946808, 0.34545599397638260264, 0.37556251678814406292,
                0.37576927665749643159, 0.37866026345824016497, 0.40735328615406801722, 0.42686359752748448404,
                0.41654471313427077206, 0.4429325789871509933, 0.43967183094118000852, 0.46815728490202695999,
                0.48705986745114104863, 0.50264263300702249904, 0.49806119330038989279, 0.50568190652218880654,
                0.53888688789371408383, 0.55088666171377986824, 0.55096311815549459112, 0.57184439664948161219,
                0.56336990768602279722, 0.58051176142805960279, 0.60352546643826143757, 0.59474343549331987191,
                0.62702720645620546591, 0.64424364226838937153, 0.64075820023852037011, 0.66881186682753090977,
                0.66266409092052769303, 0.68087228451348691394, 0.70585986397433764239, 0.71998572508842217932,
                0.70921133210525189039, 0.7278663265562015372, 0.74223592626207068879, 0.76397604540081731628,
                0.75803627291056840942, 0.78415789189316464913, 0.78608599498259890126, 0.77345553628127550194,
                0.75658173804243289418, 0.74554195586117566474, 0.70681005351729175867, 0.68661457790504287768,
                0.65614318088364742554, 0.65426066033158669644, 0.6336249598927969906, 0.59629490319845057655,
                0.58491925936394750796, 0.53336055091586787036, 0.51703488208683212601, 0.5024060905295235635,
                0.46319360489018973626, 0.46183468265170440903, 0.44131583847505684304, 0.41598897960529446216,
                0.38235917355318266297, 0.35309607375520263295, 0.33906498714516708493, 0.29747955032498546446,
                0.28593013157744806563, 0.2577364597619384301, 0.23358147453671596061, 0.21563201226884720629,
                0.17390689424344707437, 0.15073545938842219938, 0.1513170690305039312, 0.10531754154507218246,
                0.082146311938641691786, 0.054177534706462297798, 0.033825811508128710015, 0.033301235162103696996,
                -0.012366194435180557012, -0.021968217946511034433, -0.056290154832809351226, -0.07019618480347283862,
                -0.089954683699596027502, -0.13615841279401913466, -0.13534608471797290874, -0.17566089256372119376,
                -0.20774913800994676549, -0.21600313467877066409, -0.2500379295563922577, -0.26994821969733123757,
                -0.30730740041322129885, -0.32817047433291390846, -0.34696662455882143483, -0.37897625334119688922,
                -0.37791998067971366293, -0.41425814108699088312, -0.42683288815825071172, -0.4717196967778889416,
                -0.48142494899240872996, -0.52271170038097103383, -0.53825506989967342175, -0.55677935268630351917,
                -0.59551292953327628066, -0.61185177855860339857, -0.62400012918522484995, -0.67044189276652932374,
                -0.67027518570740529658, -0.71354242496507969129, -0.73514541064997684927, -0.78176245503549968152 };
        /* Mask parameters: */
        final double[] it_mp_thresh_up = { 600 };
        final double[] it_mp_thresh_down = { 100 };
        final double[] it_mp_n_max = { 1000 };
        final double[] it_mp_ts_fact = { 1 };
        /* Outports: */
        final double[] it_out_phi = { 0.59399999999999997247, 0.59399999999999997247, 0.58444943567348661695,
                0.56348299111950306273, 0.55104470145585981999, 0.53157118187972129952, 0.48598460652731290121,
                0.44877934474231168105, 0.41488609540547133347, 0.36177306203629688852, 0.31679299253119436175,
                0.27147030914663433654, 0.20889280036570082033, 0.16572734983987230661, 0.10586142841224042976,
                0.040807210917755458446, -0.018814876113157973786, -0.077106739767119805706, -0.13564714786884232711,
                -0.19222466772388505096, -0.25302837232430008818, -0.30683220858068144254, -0.36094227998945499492,
                -0.40969876918647712971, -0.44499615644860623931, -0.47338134003462145616, -0.52586731552364507358,
                -0.5488485679844335996, -0.55492099033916519879, -0.58913175856929855811, -0.58713277067450175828,
                -0.59399999999999997247, -0.59399999999999997247, -0.58926297366564472924, -0.57138159908145147448,
                -0.57007616454667442429, -0.53562660792653604691, -0.51803744353028247094, -0.47155426652556392542,
                -0.42751639032867388979, -0.38161641150335734451, -0.34692099202863752039, -0.29962788734025819215,
                -0.23020746709869122082, -0.17428816081622000578, -0.12546888149986157313, -0.059782264475447668972,
                -0.015440118458255136166, 0.048188554646163402062, 0.11569655965018038613, 0.26373270120392194871,
                0.38313579658476382139, 0.47992809436487077202, 0.5461617811337993178, 0.64628022856101652316,
                0.69730523145336886781, 0.77169440209103856709, 0.84680860717349260014, 0.90000549009573838077,
                0.91322923709697267913, 0.95397266049447071445, 0.97976563634650637447, 0.98999999999999999112,
                0.98557191645292063775, 0.98999999999999999112, 0.96682870724252878425, 0.93208960629508330609,
                0.90522310274324480073, 0.87651290510110368981, 0.80450082491670560358, 0.74750882258926687474,
                0.6701391763819488645, 0.62166586175124627367, 0.54367262702153473786, 0.43955505431681224371,
                0.36349867775424360428, 0.23375000491129874214, 0.14553212630053838361, 0.057902883348612946279,
                -0.060995081932815331527, -0.13211645493007362351, -0.2257339421081357711, -0.3229280349734573452,
                -0.42711208855545673702, -0.5215275844790719928, -0.59171450333982933412, -0.69032925603032035955,
                -0.74461743977220318236, -0.81223071003592162143, -0.86669144877698101048, -0.90474814128545666403,
                -0.96342069109371675228, -0.98943181596562446156, -0.97601131999153689645, -0.98999999999999999112,
                -0.98999999999999999112, -0.98999999999999999112, -0.58362851663610781916, -0.54681367147773762838,
                -0.53827805920611049295, -0.49736268992830839908, -0.46995702046671600227, -0.42255991327756864395,
                -0.37527013400838254986, -0.3439725219465863959, -0.27404976544885506495, -0.23212151621671373025,
                -0.18171324208913758325, -0.11168300164919529871, -0.059823351752826187111, 0.0032017728168252401234,
                0.053113697388450099857, 0.11477280690246763339, 0.17676509468994941465, 0.22705029972764823043,
                0.29977595244878435521, 0.34155836753426133123, 0.39775644534431253696, 0.42583813586371560556,
                0.47598699977490077639, 0.4977372465703056581, 0.53373612387933166978, 0.56214454411050274185,
                0.56979885854441114645, 0.58846564519272281935, 0.98999999999999999112, 0.98093109172328774026,
                0.98999999999999999112, 0.96060378261138024136, 0.93570271093760903902, 0.8536883596980007205 };
        final double[] it_out_n = { 0.0004130859451429380819, 0.010949220475386503559, 0.019640132874352990433,
                0.023682684899565251135, 0.04673243523756635126, 0.067764228617406746524, 0.060993426190099619966,
                0.071994893034931936593, 0.093526016727018462804, 0.09499977222066857685, 0.11228621659390021492,
                0.13343466009321877652, 0.13520241573577901351, 0.16574936284102514961, 0.1761672233083417527,
                0.181025960093074062, 0.19369296368506466743, 0.20790019686651950437, 0.22074614017362123586,
                0.23439316522791264763, 0.23982111529895228097, 0.25125582185729750107, 0.25824681056133869106,
                0.26767182197624050932, 0.28971653482722037332, 0.31508328384176603754, 0.30191183390536058262,
                0.32123061533414887236, 0.35586795157379946808, 0.34545599397638260264, 0.37556251678814406292,
                0.37576927665749643159, 0.37866026345824016497, 0.40735328615406801722, 0.42686359752748448404,
                0.41654471313427077206, 0.4429325789871509933, 0.43967183094118000852, 0.46815728490202695999,
                0.48705986745114104863, 0.50264263300702249904, 0.49806119330038989279, 0.50568190652218880654,
                0.53888688789371408383, 0.55088666171377986824, 0.55096311815549459112, 0.57184439664948161219,
                0.56336990768602279722, 0.58051176142805960279, 0.60352546643826143757, 0.74342929436664983989,
                0.78378400807025672137, 0.80530455283548663115, 0.80094775029815046263, 0.83601483353441352619,
                0.82833011365065956078, 0.85109035564185864242, 0.88232482996792194196, 0.89998215636052769639,
                0.88651416513156477972, 0.90983290819525186599, 0.92779490782758833323, 0.95497005675102153432,
                0.94754534113821042851, 0.98019736486645570039, 0.98260749372824851555, 0.96681942035159429416,
                0.94572717255304106221, 0.93192744482646949766, 0.88351256689661461508, 0.85826822238130351383,
                0.82017897610455925417, 0.81782582541448334279, 0.79203119986599612723, 0.74536862899806322069,
                0.73114907420493435719, 0.66670068864483478244, 0.64629360260854007425, 0.62800761316190445438,
                0.57899200611273715644, 0.57729335331463049741, 0.5516447980938210538, 0.51998622450661802219,
                0.47794896694147831484, 0.44137009219400324955, 0.4238312339314588284, 0.3718494379062318167,
                0.35741266447181008203, 0.32217057470242305151, 0.29197684317089495076, 0.26954001533605898011,
                0.2173836178043088152, 0.18841932423552773535, 0.18914633628812990707, 0.13164692693134022461,
                0.10268288992330210085, 0.067721918383077867043, 0.033825811508128710015, 0.033301235162103696996,
                -0.012366194435180557012, -0.021968217946511034433, -0.056290154832809351226, -0.07019618480347283862,
                -0.089954683699596027502, -0.13615841279401913466, -0.13534608471797290874, -0.17566089256372119376,
                -0.20774913800994676549, -0.21600313467877066409, -0.2500379295563922577, -0.26994821969733123757,
                -0.30730740041322129885, -0.32817047433291390846, -0.34696662455882143483, -0.37897625334119688922,
                -0.37791998067971366293, -0.41425814108699088312, -0.42683288815825071172, -0.4717196967778889416,
                -0.48142494899240872996, -0.52271170038097103383, -0.53825506989967342175, -0.55677935268630351917,
                -0.59551292953327628066, -0.61185177855860339857, -0.78000016148153095141, -0.83805236595816157141,
                -0.83784398213425659296, -0.8919280312063495586, -0.91893176331247095057, -0.97720306879437457415 };
        final double[] it_out_Enable_H = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1 };
        final double[] it_out_Enable_L = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                0, 0, 0, 0 };
        /* Outport Tolerances: */
        final double it_tol_phi = 1 * Math.pow(2, -31);
        final double it_tol_n = 1 * Math.pow(2, -31);
        final double it_tol_Enable_H = 0 * Math.pow(2, -0);
        final double it_tol_Enable_L = 0 * Math.pow(2, -0);
        /* Inport test variables end here */

        // /* Parameter test variables start here */
        // final int PT_LENGTH = 3;
        // final boolean PT_DOINIT = true;
        // final double PT_SAMPLETIME = 0.0;
        // /* Inport: phi_H */
        // final double pt_in_phi_H = 0;
        // /* Inport: phi_L */
        // final double pt_in_phi_L = 0;
        // /* Inport: n_H */
        // final double pt_in_n_H = 0;
        // /* Inport: n_L */
        // final double pt_in_n_L = 0;
        // /* Mask parameter: thresh_up */
        // final double[][] pt_mp_thresh_up = { { 0 }, { 0 }, { 0 } };
        // /* Mask parameter: thresh_down */
        // final double[][] pt_mp_thresh_down = { { 0 }, { 0 }, { 0 } };
        // /* Mask parameter: n_max */
        // final double[][] pt_mp_n_max = { { 0 }, { 0 }, { 0 } };
        // /* Mask parameter: ts_fact */
        // final double[][] pt_mp_ts_fact = { { 0 }, { 0 }, { 0 } };
        // /* Outport: phi */
        // final double[] pt_out_phi = { 0, 0, 0 };
        // /* Outport: n */
        // final double[] pt_out_n = { 0, 0, 0 };
        // /* Outport: Enable_H */
        // final double[] pt_out_Enable_H = { 0, 0, 0 };
        // /* Outport: Enable_L */
        // final double[] pt_out_Enable_L = { 0, 0, 0 };
        // /* Outport tolerances: phi */
        // final double pt_tol_phi = Math.pow(2, -31);
        // /* Outport tolerances: n */
        // final double pt_tol_n = Math.pow(2, -31);
        // /* Outport tolerances: Enable_H */
        // final double pt_tol_Enable_H = Math.pow(2, -0);
        // /* Outport tolerances: Enable_L */
        // final double pt_tol_Enable_L = Math.pow(2, -0);
        // /* Parameter test variables end here */

        /* Conversion test variables start here */
        final int CT_LENGTH = 8;
        final double CT_SAMPLETIME = 0.0001;
        /* Mask parameter: thresh_up */
        final double[][] ct_mp_thresh_up = { { 0 }, { 1 }, { 999 }, { 1000 }, { 1001 }, { 600 }, { 1024 }, { 33000 } };
        /* Mask parameter: thresh_down */
        final double[][] ct_mp_thresh_down = { { 0 }, { 0 }, { 1 }, { 100 }, { 100 }, { 200 }, { 512 }, { 3000 } };
        /* Mask parameter: n_max */
        final double[][] ct_mp_n_max = { { 1000 }, { 1000 }, { 1000 }, { 1000 }, { 1000 }, { -1000 }, { 32768 },
                { 32768 } };
        /* Mask parameter: ts_fact */
        final double[][] ct_mp_ts_fact = { { 1 }, { 1 }, { 1 }, { 1 }, { 1 }, { 1 }, { 1 }, { 1 } };
        /* Implementation parameter: thresh_up */
        final double[][] ct_cp_thresh_up = { { 0 }, { 2147484 }, { 2.145336164000000e+09 }, { 2.147483647000000e+09 },
                { 2.147483647000000e+09 }, { 1.288490189000000e+09 }, { 67108864 }, { 2.147483647000000e+09 } };
        /* Implementation parameter: thresh_down */
        final double[][] ct_cp_thresh_down = { { 0 }, { 0 }, { 2147484 }, { 214748365 }, { 214748365 }, { 429496730 },
                { 33554432 }, { 196608000 } };
        /* Implementation Parameter tolerances: thresh_up */
        final double ct_tol_thresh_up = 0.0;
        /* Implementation Parameter tolerances: thresh_down */
        final double ct_tol_thresh_down = 0.0;
        /* Conversion test variables end here */

        /* Conversion-on-Target test variables start here */
        /* ! Uses test vectors of Conversion test ! */
        /* Implementation Parameter tolerances: thresh_up */
        final double cott_tol_thresh_up = 60;
        /* Implementation Parameter tolerances: thresh_down */
        final double cott_tol_thresh_down = 60;
        /* Conversion-on-Target test variables end here */

        try {
            TestSuite suite = new TestSuite(protocol, "mchp_zsmt", "EstimatorSwitch", "FiP32");

            /* INPORT TEST */
            InportTest it = new InportTest("mchp_zsmt", "EstimatorSwitch", "FiP32", protocol, IT_DOINIT);
            Map<String, TData> it_mp = new HashMap<String, TData>();
            it_mp.put("thresh_up", new TNumeric(it_mp_thresh_up));
            it_mp.put("thresh_down", new TNumeric(it_mp_thresh_down));
            it_mp.put("n_max", new TNumeric(it_mp_n_max));
            it_mp.put("ts_fact", new TNumeric(it_mp_ts_fact));
            it.setMaskParameters(it_mp);
            Map<String,  Double> it_tol = new HashMap<String, Double>();
            it_tol.put("phi", it_tol_phi);
            it_tol.put("n", it_tol_n);
            it_tol.put("Enable_H", it_tol_Enable_H);
            it_tol.put("Enable_L", it_tol_Enable_L);
            it.setTolerances(it_tol);
            for (int i = 0; i < IT_LENGTH; i++) {
                Map<String,  TNumeric> it_in = new HashMap<String, TNumeric>();
                Map<String,  TNumeric> it_out = new HashMap<String, TNumeric>();
                it_in.put("phi_H", new TNumeric(it_in_phi_H[i]));
                it_in.put("phi_L", new TNumeric(it_in_phi_L[i]));
                it_in.put("n_H", new TNumeric(it_in_n_H[i]));
                it_in.put("n_L", new TNumeric(it_in_n_L[i]));
                it_out.put("phi", new TNumeric(it_out_phi[i]));
                it_out.put("n", new TNumeric(it_out_n[i]));
                it_out.put("Enable_H", new TNumeric(it_out_Enable_H[i]));
                it_out.put("Enable_L", new TNumeric(it_out_Enable_L[i]));
                it.addConfig(it_in, it_out);
            }
            it.setSampleTime(IT_SAMPLETIME);
            suite.add(it);

            // /* PARAMETER TEST */
            // ParameterTest pt = new ParameterTest("mchp_zsmt", "EstimatorSwitch", "FiP32", protocol, PT_DOINIT);
            // Map<String, TNumeric> pt_in = new HashMap<String, TNumeric>();
            // pt_in.put("phi_H", new TNumeric(pt_in_phi_H));
            // pt_in.put("phi_L", new TNumeric(pt_in_phi_L));
            // pt_in.put("n_H", new TNumeric(pt_in_n_H));
            // pt_in.put("n_L", new TNumeric(pt_in_n_L));
            // pt.setInports(pt_in);
            // Map<String, Double> pt_tol = new HashMap<String, Double>();
            // pt_tol.put("phi", pt_tol_phi);
            // pt_tol.put("n", pt_tol_n);
            // pt_tol.put("Enable_H", pt_tol_Enable_H);
            // pt_tol.put("Enable_L", pt_tol_Enable_L);
            // pt.setTolerances(pt_tol);
            // for (int i = 0; i < PT_LENGTH; i++) {
            // Map<String, TData> pt_mp = new HashMap<String, TData>();
            // Map<String, TNumeric> pt_out = new HashMap<String, TNumeric>();
            // pt_mp.put("thresh_up", new TNumeric(pt_mp_thresh_up[i]));
            // pt_mp.put("thresh_down", new TNumeric(pt_mp_thresh_down[i]));
            // pt_mp.put("n_max", new TNumeric(pt_mp_n_max[i]));
            // pt_mp.put("ts_fact", new TNumeric(pt_mp_ts_fact[i]));
            // pt_out.put("phi", new TNumeric(pt_out_phi[i]));
            // pt_out.put("n", new TNumeric(pt_out_n[i]));
            // pt_out.put("Enable_H", new TNumeric(pt_out_Enable_H[i]));
            // pt_out.put("Enable_L", new TNumeric(pt_out_Enable_L[i]));
            // pt.addConfig(pt_mp, pt_out);
            // }
            // pt.setSampleTime(PT_SAMPLETIME);
            // suite.add(pt);

            /* CONVERSION TEST */
            ConversionTest ct = new ConversionTest("mchp_zsmt", "EstimatorSwitch", "FiP32");
            Map<String,  Double> ct_tol = new HashMap<String, Double>();
            ct_tol.put("thresh_up", ct_tol_thresh_up);
            ct_tol.put("thresh_down", ct_tol_thresh_down);
            ct.setTolerances(ct_tol);
            for (int i = 0; i < CT_LENGTH; i++) {
                Map<String, TData> ct_mp = new HashMap<String, TData>();
                Map<String, TNumeric> ct_cp = new HashMap<String, TNumeric>();
                ct_mp.put("thresh_up", new TNumeric(ct_mp_thresh_up[i]));
                ct_mp.put("thresh_down", new TNumeric(ct_mp_thresh_down[i]));
                ct_mp.put("n_max", new TNumeric(ct_mp_n_max[i]));
                ct_mp.put("ts_fact", new TNumeric(ct_mp_ts_fact[i]));
                ct_cp.put("thresh_up", new TNumeric(ct_cp_thresh_up[i]));
                ct_cp.put("thresh_down", new TNumeric(ct_cp_thresh_down[i]));
                ct.addConfig(ct_mp, ct_cp);
            }
            ct.setSampleTime(CT_SAMPLETIME);
            suite.add(ct);

            /* CONVERSION-ON-TARGET TEST */
            ConversionOnTargetTest cott = new ConversionOnTargetTest("mchp_zsmt", "EstimatorSwitch", "FiP32", protocol);
            Map<String,  Double> cott_tol = new HashMap<String, Double>();
            cott_tol.put("thresh_up", cott_tol_thresh_up);
            cott_tol.put("thresh_down", cott_tol_thresh_down);
            cott.setTolerances(cott_tol);
            for (int i = 0; i < CT_LENGTH; i++) {
                Map<String, TData> cott_mp = new HashMap<String, TData>();
                Map<String, TNumeric> cott_cp = new HashMap<String, TNumeric>();
                /* Uses test data of Conversion test */
                cott_mp.put("thresh_up", new TNumeric(ct_mp_thresh_up[i]));
                /* Uses test data of Conversion test */
                cott_mp.put("thresh_down", new TNumeric(ct_mp_thresh_down[i]));
                /* Uses test data of Conversion test */
                cott_mp.put("n_max", new TNumeric(ct_mp_n_max[i]));
                /* Uses test data of Conversion test */
                cott_mp.put("ts_fact", new TNumeric(ct_mp_ts_fact[i]));
                /* Use test data of Conversion test */
                cott_cp.put("thresh_up", new TNumeric(ct_cp_thresh_up[i]));
                /* Use test data of Conversion test */
                cott_cp.put("thresh_down", new TNumeric(ct_cp_thresh_down[i]));
                cott.addConfig(cott_mp, cott_cp);
            }
            /* Use sample time of Conversion test */
            cott.setSampleTime(CT_SAMPLETIME);
            suite.add(cott);

            suite.test();
            suite.report();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws Exception {
        final String port;
        if (args.length == 0) {
            port = "COM17";
        } else {
            port = args[0];
        }
        Protocol protocol = ProtocolFactory.getLNet(new Serial(115200, Serial.Databits.BITS_8, Serial.Parity.NONE, Serial.Stopbits.STOPBITS_1, port), 1);
        new Test_EstimatorSwitch_FiP32(protocol);
    }
}
